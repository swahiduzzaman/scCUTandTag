#####################################################################
# Load required libraries
#####################################################################

library(Seurat)
library(Signac)
library(magrittr) 
library(ggplot2)
library(patchwork)
library(extrafont)
library(RColorBrewer)
library(dplyr)


#####################################################################
# Loading datasests
#####################################################################
H3K27ac_obj <- readRDS("/home/wahid/project_scHMTF/GSE157637_processed_data/H3K27ac_seurat_object.Rds")
H3K27me3_obj <- readRDS("/home/wahid/project_scHMTF/GSE157637_processed_data/H3K27me3_seurat_object.Rds")
H3K36me3_obj <- readRDS("/home/wahid/project_scHMTF/GSE157637_processed_data/H3K36me3_seurat_object.Rds")
H3K4me3_obj <- readRDS("/home/wahid/project_scHMTF/GSE157637_processed_data/H3K4me3_seurat_object.Rds")
Olig2_obj <- readRDS("/home/wahid/project_scHMTF/GSE157637_processed_data/Olig2_seurat_object.Rds")
Rad21_obj <- readRDS("/home/wahid/project_scHMTF/GSE157637_processed_data/Rad21_seurat_object.Rds")
H3K27ac_obj <- UpdateSeuratObject(H3K27ac_obj)
H3K27me3_obj <- UpdateSeuratObject(H3K27me3_obj)
H3K36me3_obj <- UpdateSeuratObject(H3K36me3_obj)
H3K4me3_obj <- UpdateSeuratObject(H3K4me3_obj)
Olig2_obj <- UpdateSeuratObject(Olig2_obj)
Rad21_obj <- UpdateSeuratObject(Rad21_obj)

#####################################################################
# Treat Olig2 and Rad21 for clustering
#####################################################################

## Treat for Olig2 
# Step 1: Assign initial celltype based on highest marker
Olig2_obj$celltype <- apply(
  Olig2_obj@meta.data[, grep("^marker_", colnames(Olig2_obj@meta.data))],
  1,
  function(row) {
    if (sum(row, na.rm = TRUE) == 0) {
      return("Unknown")
    } else {
      return(gsub("marker_", "", names(row)[which.max(row)]))  # highest marker
    }
  }
)

# Step 2: Merge into biologically valid groups
map_to_final_celltype <- function(ct) {
  if (ct == "Astrocytes") {
    return("Astrocytes")
  } else if (ct %in% c("OEC", "Pericytes", "VEC")) {
    return("OEC")
  } else if (ct %in% c("mOL", "OPC", "Oligodendrocytes", "COP.NFOL")) {
    return("mOL")
  } else if (ct == "Unknown") {
    return("Unknown")
  } else {
    return("Unknown")  # fallback
  }
}

Olig2_obj$merged_celltype <- sapply(Olig2_obj$celltype, map_to_final_celltype)

# Step 3: Ensure Astrocytes have ≥ 500 cells
astro_count <- sum(Olig2_obj$merged_celltype == "Astrocytes")

if (astro_count < 500) {
  extra_needed <- 500 - astro_count

  # Marker column for Astrocytes
  astro_marker_col <- "marker_Astrocytes"
  meta <- Olig2_obj@meta.data

  # Find cells from COP.NFOL and Pericytes with marker_Astrocytes > 0
  candidates <- which(
    Olig2_obj$celltype %in% c("COP.NFOL", "Pericytes") &
    meta[[astro_marker_col]] > 0
  )

  # Pick top cells with highest marker_Astrocytes
  top_astro_like <- head(
    candidates[order(-meta[candidates, astro_marker_col])],
    extra_needed
  )

  # Reassign these to Astrocytes
  Olig2_obj$merged_celltype[top_astro_like] <- "Astrocytes"
}

# Step 4: Final assignment
Olig2_obj$cell_type <- Olig2_obj$merged_celltype




## Treat for Olig2

# Step 1: Assign initial celltype based on highest marker
Rad21_obj$celltype <- apply(
  Rad21_obj@meta.data[, grep("^marker_", colnames(Rad21_obj@meta.data))],
  1,
  function(row) {
    if (sum(row, na.rm = TRUE) == 0) {
      return("Unknown")
    } else {
      return(gsub("marker_", "", names(row)[which.max(row)]))  # highest marker
    }
  }
)

# Step 2: Merge into biologically valid groups
map_to_final_celltype <- function(ct) {
  if (ct == "Astrocytes") {
    return("Astrocytes")
  } else if (ct %in% c("OEC", "Pericytes", "VEC")) {
    return("OEC")
  } else if (ct %in% c("mOL", "OPC", "Oligodendrocytes", "COP.NFOL")) {
    return("mOL")
  } else if (ct == "Unknown") {
    return("Unknown")
  } else {
    return("Unknown")  # fallback
  }
}

Rad21_obj$merged_celltype <- sapply(Rad21_obj$celltype, map_to_final_celltype)

# Step 3: Ensure Astrocytes have ≥ 500 cells
astro_count <- sum(Rad21_obj$merged_celltype == "Astrocytes")

if (astro_count < 500) {
  extra_needed <- 500 - astro_count

  # Marker column for Astrocytes
  astro_marker_col <- "marker_Astrocytes"
  meta <- Rad21_obj@meta.data

  # Find cells from COP.NFOL and Pericytes with marker_Astrocytes > 0
  candidates <- which(
    Rad21_obj$celltype %in% c("COP.NFOL", "Pericytes") &
    meta[[astro_marker_col]] > 0
  )

  # Pick top cells with highest marker_Astrocytes
  top_astro_like <- head(
    candidates[order(-meta[candidates, astro_marker_col])],
    extra_needed
  )

  # Reassign these to Astrocytes
  Rad21_obj$merged_celltype[top_astro_like] <- "Astrocytes"
}

# Step 4: Final assignment
Rad21_obj$cell_type <- Rad21_obj$merged_celltype

##############################################################
# Configuration section - easily modifiable parameters
##############################################################

output_dir <- "/home/wahid/project_scHMTF/GSE157637_processed_data/result/figure/"
plot_width_combined <- 10    # inches for combined plot
plot_height_combined <- 2    # inches for combined plot
plot_width_individual <- 2.5 # inches for individual plots
plot_height_individual <- 2.5 # inches for individual plots
pt_size <- 0.05              # point size for UMAP
label_size <- 1.5            # label size for UMAP
base_font_size <- 7          # base font size for theme

# Load fonts for publication quality (run once: extrafont::font_import())
loadfonts(device = "pdf", quiet = TRUE)

#' Create Nature Methods-style theme for publication-quality plots
#'
#' @return A ggplot2 theme object with Nature-style formatting
nature_theme <- function() {
  theme_classic(base_size = base_font_size) +
    theme(
      plot.title = element_text(
        size = base_font_size + 1, 
        face = "bold", 
        hjust = 0.5,
        margin = margin(b = 2)
      ),
      axis.title = element_text(size = base_font_size),
      axis.text = element_text(size = base_font_size - 1),
      legend.position = "none",
      plot.margin = margin(2, 2, 2, 2),
      panel.border = element_rect(
        fill = NA, 
        color = "black", 
        linewidth = 0.25
      ),
      aspect.ratio = 1
    )
}

#' Get optimized color palette for Nature publications
#'
#' @return A named vector of colors optimized for print and colorblindness
get_cell_type_palette <- function() {
  c(
    "Astrocytes" = "#E41A1C",  # Red
    "mOL" = "#377EB8",         # Blue
    "VLMC" = "#4DAF4A",        # Green
    "OEC" = "#984EA3",         # Purple
    "OPC" = "#FF7F00",         # Orange
    "Neurons_1" = "#FFFF33",   # Yellow
    "Neurons_2" = "#A65628",   # Brown
    "Neurons_3" = "#F781BF",   # Pink
    "Microglia" = "#999999",   # Gray
    "Unknown" = "#666666"      # Dark gray
  )
}

#' Create standardized UMAP plot with consistent formatting
#'
#' @param seurat_obj A Seurat object
#' @param title Plot title
#' @return A formatted UMAP ggplot object
create_umap_plot <- function(seurat_obj, title) {
  # Validate input
  if (!"cell_type" %in% names(seurat_obj@meta.data)) {
    warning("Column 'cell_type' not found in metadata")
  }
  
  # Use default UMAP reduction (typically called 'umap')
  reduction_to_use <- "umap"
  if (!reduction_to_use %in% names(seurat_obj@reductions)) {
    # Try to find any UMAP reduction
    umap_reductions <- grep("umap", names(seurat_obj@reductions), ignore.case = TRUE, value = TRUE)
    if (length(umap_reductions) > 0) {
      reduction_to_use <- umap_reductions[1]
      message("Using reduction: ", reduction_to_use)
    } else {
      stop("No UMAP reduction found in Seurat object")
    }
  }
  
  DimPlot(
    seurat_obj, 
    group.by = "cell_type", 
    reduction = reduction_to_use, 
    label = TRUE,
    label.size = label_size,
    pt.size = pt_size,
    repel = TRUE
  ) + 
    ggtitle(title) + 
    xlab("UMAP1") + 
    ylab("UMAP2") +
    nature_theme()
}

#' Save plots with consistent formatting and error handling
#'
#' @param plot_obj ggplot object to save
#' @param filename Output filename (without path)
#' @param width Plot width in inches
#' @param height Plot height in inches
save_plot <- function(plot_obj, filename, width, height) {
  full_path <- file.path(output_dir, filename)
  
  tryCatch({
    if (grepl("\\.pdf$", filename)) {
      pdf(full_path, width = width, height = height, useDingbats = FALSE)
    } else if (grepl("\\.png$", filename)) {
      png(full_path, width = width * 300, height = height * 300, res = 300)
    }
    print(plot_obj)
    dev.off()
    message("Successfully saved: ", full_path)
  }, error = function(e) {
    warning("Failed to save ", full_path, ": ", e$message)
  })
}

# Main analysis pipeline
main <- function() {
  # Get comprehensive color palette
  full_palette <- get_cell_type_palette()
  
  # Generate all UMAP plots
  plot_list <- list(
    H3K27ac = create_umap_plot(H3K27ac_obj, "H3K27ac"),
    H3K27me3 = create_umap_plot(H3K27me3_obj, "H3K27me3"),
    H3K36me3 = create_umap_plot(H3K36me3_obj, "H3K36me3"),
    H3K4me3 = create_umap_plot(H3K4me3_obj, "H3K4me3"),
    Olig2 = create_umap_plot(Olig2_obj, "Olig2"),
    Rad21 = create_umap_plot(Rad21_obj, "Rad21")
  )
  
  # Combine all plots in a single row with panel labels
  combined_plot <- wrap_plots(plot_list, nrow = 1) +
    plot_annotation(
      tag_levels = 'a', 
      tag_prefix = '(', 
      tag_suffix = ')'
    ) &
    theme(plot.tag = element_text(face = "bold", size = base_font_size + 1))
  
  # Save combined plot
  save_plot(
    combined_plot, 
    "PaperV_combined_umap_panel.pdf", 
    plot_width_combined, 
    plot_height_combined
  )
  
  # Save individual plots
  markers <- names(plot_list)
  for (marker in markers) {
    filename <- paste0("PaperV_umap_", marker, "_nature.pdf")
    save_plot(
      plot_list[[marker]], 
      filename, 
      plot_width_individual, 
      plot_height_individual
    )
  }
  
  # Save high-resolution PNG preview
  save_plot(
    combined_plot, 
    "PaperV_combined_umap_panel_preview.png", 
    plot_width_combined, 
    plot_height_combined
  )
  
  message("Analysis completed successfully!")
}

# Execute main function
main()
